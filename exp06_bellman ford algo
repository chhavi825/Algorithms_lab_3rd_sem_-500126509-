#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define INFINITY 100000 
void initializeSingleSource(int V, int dist[], int parent[], int src) 
{ 
for (int i = 0; i < V; i++) 
{ 
dist[i] = INFINITY; 
parent[i] = -1; 
} 
dist[src] = 0; 
} 
 
void relax(int u, int v, int weight, int dist[], int parent[]) 
{ 
    if (dist[u] != INFINITY && dist[v] > dist[u] + weight) 
    { 
        dist[v] = dist[u] + weight; 
        parent[v] = u; 
    } 
} 
 
int BellmanFord(int V, int E, int graph[][3], int dist[], int parent[], int src) 
{ 
    initializeSingleSource(V, dist, parent, src); 
 
    for (int i = 1; i <= V - 1; i++) 
    { 
        for (int j = 0; j < E; j++) 
        { 
            int u = graph[j][0]; 
            int v = graph[j][1]; 
            int weight = graph[j][2]; 
            relax(u, v, weight, dist, parent); 
        } 
    } 
 
    for (int i = 0; i < E; i++) 
    { 
        int u = graph[i][0]; 
        int v = graph[i][1]; 
        int weight = graph[i][2]; 
        if (dist[u] != INFINITY && dist[v] > dist[u] + weight) 
        { 
            return 0; 
        } 
    } 
 
    return 1; 
} 
 
int main() 
{ 
    int V; 
    printf("Enter the number of vertices: "); 
    scanf("%d", &V); 
 
    int adjMatrix[V][V]; 
    printf("Enter the adjacency matrix (use %d for infinity):\n", INFINITY); 
    for (int i = 0; i < V; i++) 
    { 
        for (int j = 0; j < V; j++) 
        { 
            scanf("%d", &adjMatrix[i][j]); 
        } 
    } 
 
    int src; 
    printf("Enter the source vertex: "); 
    scanf("%d", &src); 
 
    clock_t t; 
    t = clock(); 
 
    int E = 0; 
    for (int i = 0; i < V; i++) 
    { 
        for (int j = 0; j < V; j++) 
        { 
            if (adjMatrix[i][j] != 0 && adjMatrix[i][j] != INFINITY) 
            { 
                E++; 
            } 
        } 
    } 
 
    int graph[E][3]; 
    int k = 0; 
    for (int i = 0; i < V; i++) 
    { 
        for (int j = 0; j < V; j++) 
        { 
            if (adjMatrix[i][j] != 0 && adjMatrix[i][j] != INFINITY) 
            { 
                graph[k][0] = i; 
                graph[k][1] = j; 
                graph[k][2] = adjMatrix[i][j]; 
                k++; 
            } 
        } 
    } 
 
    int dist[V], parent[V]; 
    if (BellmanFord(V, E, graph, dist, parent, src)) 
    { 
        printf("Vertex Distance from Source\n"); 
        for (int i = 0; i < V; i++) 
        { 
            printf("%d \t\t %d\n", i, dist[i]); 
        } 
    } 
    else 
    { 
        printf("Graph contains a negative-weight cycle\n"); 
    } 
 
    t = clock() - t; 
    double time_taken = ((double)t) / CLOCKS_PER_SEC; 
 
    printf("Bellman Ford Algorithm took %f seconds to execute\n", time_taken); 
    return 0; 
}
